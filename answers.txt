26.3.11_SQL-JOINS Exercise
**************************Starter Info*********************************************
oins_exercise=# \dt
         List of relations
 Schema |   Name   | Type  | Owner
--------+----------+-------+-------
 public | owners   | table | sharo
 public | vehicles | table | sharo
(2 rows)

joins_exercise=# SELECT * FROM owners;
 id | first_name | last_name
----+------------+-----------
  1 | Bob        | Hope
  2 | Jane       | Smith
  3 | Melody     | Jones
  4 | Sarah      | Palmer
  5 | Alex       | Miller
  6 | Shana      | Smith
  7 | Maya       | Malarkin
(7 rows)

joins_exercise=# SELECT * FROM vehicles;
 id |  make  |  model  | year |  price   | owner_id
----+--------+---------+------+----------+----------
  1 | Toyota | Corolla | 2002 |  2999.99 |        1
  2 | Honda  | Civic   | 2012 | 12999.99 |        1
  3 | Nissan | Altima  | 2016 | 23999.99 |        2
  4 | Subaru | Legacy  | 2006 |  5999.99 |        2
  5 | Ford   | F150    | 2012 |  2599.99 |        3
  6 | GMC    | Yukon   | 2016 | 12999.99 |        3
  7 | GMC    | Yukon   | 2014 | 22999.99 |        4
  8 | Toyota | Avalon  | 2009 | 12999.99 |        4
  9 | Toyota | Camry   | 2013 | 12999.99 |        4
 10 | Honda  | Civic   | 2001 |  7999.99 |        5
 11 | Nissan | Altima  | 1999 |  1899.99 |        6
 12 | Lexus  | ES350   | 1998 |  1599.99 |        6
 13 | BMW    | 300     | 2012 | 22999.99 |        6
 14 | BMW    | 700     | 2015 | 52999.99 |        6
(14 rows)

o.id=v.owner_id

Part 1*******************************************

1. 
	Question: Join the two tables so that every column and record appears, regardless of if there is not an owner_id. Your output should look like this:

	Answer: 

SELECT * FROM owners FULL JOIN vehicles ON owners.id = vehicles.owner_id;

 id | first_name | last_name | id |  make  |  model  | year |  price   | owner_id
----+------------+-----------+----+--------+---------+------+----------+----------
  1 | Bob        | Hope      |  1 | Toyota | Corolla | 2002 |  2999.99 |        1
  1 | Bob        | Hope      |  2 | Honda  | Civic   | 2012 | 12999.99 |        1
  2 | Jane       | Smith     |  3 | Nissan | Altima  | 2016 | 23999.99 |        2
  2 | Jane       | Smith     |  4 | Subaru | Legacy  | 2006 |  5999.99 |        2
  3 | Melody     | Jones     |  5 | Ford   | F150    | 2012 |  2599.99 |        3
  3 | Melody     | Jones     |  6 | GMC    | Yukon   | 2016 | 12999.99 |        3
  4 | Sarah      | Palmer    |  7 | GMC    | Yukon   | 2014 | 22999.99 |        4
  4 | Sarah      | Palmer    |  8 | Toyota | Avalon  | 2009 | 12999.99 |        4
  4 | Sarah      | Palmer    |  9 | Toyota | Camry   | 2013 | 12999.99 |        4
  5 | Alex       | Miller    | 10 | Honda  | Civic   | 2001 |  7999.99 |        5
  6 | Shana      | Smith     | 11 | Nissan | Altima  | 1999 |  1899.99 |        6
  6 | Shana      | Smith     | 12 | Lexus  | ES350   | 1998 |  1599.99 |        6
  6 | Shana      | Smith     | 13 | BMW    | 300     | 2012 | 22999.99 |        6
  6 | Shana      | Smith     | 14 | BMW    | 700     | 2015 | 52999.99 |        6
  7 | Maya       | Malarkin  |    |        |         |      |          |
(15 rows)


2. 
	Question: Count the number of cars for each owner. Display the owners first_name, last_name and count of vehicles. The first_name should be ordered in ascending order. 		Your output should look like this:
	Answer:

SELECT first_name, last_name, COUNT(*) FROM owners o JOIN vehicles v ON o.id=v.owner_id GROUP BY o.first_name, o.last_name ORDER BY o.first_name;

******************************

Correct Answer:
 first_name | last_name | count
------------+-----------+-------
 Alex       | Miller    |     1
 Bob        | Hope      |     2
 Jane       | Smith     |     2
 Melody     | Jones     |     2
 Sarah      | Palmer    |     3
 Shana      | Smith     |     4
(6 rows)

3. 
	Question: 
		Count the number of cars for each owner and display the average price for each of the cars as integers. Display the owners first_name, last_name, average price and count of vehicles. The first_name should be ordered in 		descending order. Only display results with more than one vehicle and an average price greater than 10000. Your output should look like this:

	Answer: # of cars, AVE Price of car/owner, first, last
		SELECT o.first_name, o.last_name, AVG(price), COUNT(*) FROM owners o JOIN vehicles v ON o.id=v.owner_id GROUP BY o.id HAVING COUNT(*)>1 AND AVG(price)/o.id>1000 ORDER BY first_name DESC; 

************************Question *************

A. Why was I not able to enter an alias for the average value so that I could shorten my code in the below line:
****************************************Not correct line of code in below line, do not use as an example in future, for questions with Mentor only***********************************************************************************
	joins_exercise=# SELECT o.first_name, o.last_name, ROUND(AVG(price)) AS test , COUNT(*) FROM owners o JOIN vehicles v ON o.id=v.owner_id GROUP BY o.id HAVING COUNT(*)>1 AND test>10000 ORDER BY first_name DESC;
***************************************Not correct line of code in above line, do not use as an example in future, for questions with Mentor only***********************************************************************************
**********************************************
B. Based on my findings for aggregate function conditions, why, in the below line of code, able to not have the 2 SELECT columns not a requirement in GROUP BY section?  My findings showed that all NON-Aggregate functions in SELECT section need to be in GROUP BY section. The below line definitely does not represent that.

joins_exercise=# SELECT o.first_name, o.last_name, ROUND(AVG(price)), COUNT(*) FROM owners o JOIN vehicles v ON o.id=v.owner_id GROUP BY o.id HAVING COUNT(*)>1 AND ROUND(AVG(price))>10000 ORDER BY first_name DESC;
 first_name | last_name | round | count
------------+-----------+-------+-------
 Shana      | Smith     | 19875 |     4
 Sarah      | Palmer    | 16333 |     3
 Jane       | Smith     | 15000 |     2
(3 rows)

Part 2*******************************************

SQL ZOO
Complete 6 & 7 at https://sqlzoo.net/

Section 6:

1.  
Question:
	The first example shows the goal scored by a player with the last name 'Bender'. The * says to list all the columns in the table - a shorter way of saying matchid, teamid, player, gtime

	Modify it to show the matchid and player name for all goals scored by Germany. To identify German players, check for: teamid = 'GER'

Answer: SELECT matchid, player FROM goal 
  WHERE teamid= 'GER';

2. 

Question:
	From the previous query you can see that Lars Bender's scored a goal in game 1012. Now we want to know what teams were playing in that match.

Notice in the that the column matchid in the goal table corresponds to the id column in the game table. We can look up information about game 1012 by finding that row in the game table.

Show id, stadium, team1, team2 for just game 1012

Answer: 
SELECT id,stadium,team1,team2
  FROM game WHERE id=1012  

3. 
	Question:
	You can combine the two steps into a single query with a JOIN.

SELECT *
  FROM game JOIN goal ON (id=matchid)

The FROM clause says to merge data from the goal table with that from the game table. The ON says how to figure out which rows in game go with which rows in goal - the matchid from goal must match id from game. (If we wanted to be more clear/specific we could say
ON (game.id=goal.matchid)

The code below shows the player (from the goal) and stadium name (from the game table) for every goal scored.

Modify it to show the player, teamid, stadium and mdate for every German goal.
	Answer:SELECT player,teamid, stadium, mdate
  FROM game JOIN goal ON (id=matchid) WHERE teamid='GER'

4.
	Question: 
Use the same JOIN as in the previous question.

Show the team1, team2 and player for every goal scored by a player called Mario player LIKE 'Mario%'
Restore default

	Answer:
	SELECT team1, team2, player FROM game JOIN goal ON (id=matchid) WHERE player LIKE 'Mario%'

5. 
	Question:
The table eteam gives details of every national team including the coach. You can JOIN goal to eteam using the phrase goal JOIN eteam on teamid=id

Show player, teamid, coach, gtime for all goals scored in the first 10 minutes gtime<=10
	Answer:
	SELECT player, teamid, coach, gtime
  FROM goal JOIN eteam ON teamid=id
 WHERE gtime<=10

6. 
	Question:
o JOIN game with eteam you could use either
game JOIN eteam ON (team1=eteam.id) or game JOIN eteam ON (team2=eteam.id)

Notice that because id is a column name in both game and eteam you must specify eteam.id instead of just id

List the dates of the matches and the name of the team in which 'Fernando Santos' was the team1 coach.

	Answer:
	SELECT mdate, teamname FROM game JOIN eteam ON (team1=eteam.id) WHERE coach='Fernando Santos'

7. 
	Question:
	List the player for every goal scored in a game where the stadium was 'National Stadium, Warsaw'

	Answer:
	
	SELECT player FROM goal JOIN game ON (matchid=game.id) WHERE stadium='National Stadium, Warsaw'

8. 
	Question:
	The example query shows all goals scored in the Germany-Greece quarterfinal.

	Instead show the name of all players who scored a goal against Germany.
	HINT:
		SELECT player, gtime
  		FROM game JOIN goal ON matchid = id 
    		WHERE (team1='GER' AND team2='GRE')
	
	Answer:
	
		SELECT DISTINCT player FROM goal JOIN game ON (matchid=game.id) WHERE (team1='GER' OR team2='GER') AND teamid<> 'GER'

9. 
	Question: Show teamname and the total number of goals scored.
			COUNT and GROUP BY
			HINT: 	SELECT teamname, player
  				FROM eteam JOIN goal ON id=teamid
 				ORDER BY teamname
			
	

	Answer:
	SELECT  teamname, COUNT(*) FROM goal JOIN eteam ON (teamid=eteam.id) GROUP BY teamname

10. 	
	Question:
	Show the stadium and the number of goals scored in each stadium. 
	Answer:
	SELECT stadium, COUNT(*) FROM game JOIN goal ON (id=goal.matchid) GROUP BY stadium 

11. 	
	Question:
	For every match involving 'POL', show the matchid, date and the number of goals scored.
	HINT:
		SELECT matchid, mdate, COUNT(*)
  		FROM game JOIN goal ON matchid = id WHERE (team1 = 'POL' OR team2 = 'POL') GROUP BY matchid, mdate 

	Answer:
	SELECT matchid, mdate, COUNT(*) FROM game JOIN goal ON matchid = id WHERE (team1 = 'POL' OR team2 = 'POL') GROUP BY matchid, mdate

12.
	Question:
	For every match where 'GER' scored, show matchid, match date and the number of goals scored by 'GER'
	Answer:
	SELECT matchid, mdate, COUNT(*) FROM goal JOIN game ON (matchid=game.id) WHERE goal.teamid='GER' GROUP BY matchid, mdate

13. 	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DIDN'T KNOW HOW TO DO THIS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	A. Why 
	Question:
	List every match with the goals scored by each team as shown. This will use "CASE WHEN" which has not been explained in any previous exercises.
	mdate	team1	score1	team2	score2
	1 July 2012	ESP	4	ITA 	0
	10 June 2012	ESP	1	ITA	1
	10 June 2012	IRL	1	CRO	3
	...

	Notice in the query given every goal is listed. If it was a team1 goal then a 1 appears in score1, otherwise there is a 0. You could SUM this column to get a count of the goals scored by team1. Sort your result by mdate, matchid, 	team1 and team2. 
	

	Answer:

SELECT mdate,
  team1,
  CASE WHEN teamid=team1 THEN 1 ELSE 0 END score1, team2, CASE WHEN teamid=team2 THEN 1 ELSE 0 END score2
  FROM game JOIN goal ON matchid = id
	

	Quiz
1. Question:
	You want to find the stadium where player 'Dimitris Salpingidis' scored. Select the JOIN condition to use: 
	Answer: 
	 game  JOIN goal ON (id=matchid)

2. Question
	You JOIN the tables goal and eteam in an SQL statement. Indicate the list of column names that may be used in the SELECT line: 
	Answer:
	matchid, teamid, player, gtime, id, teamname, coach
3. Question:
	Select the code which shows players, their team and the amount of goals they scored against Greece(GRE).
	Answer:
	SELECT player, teamid, COUNT(*)
  	FROM game JOIN goal ON matchid = id
 	WHERE (team1 = "GRE" OR team2 = "GRE")
   	AND teamid != 'GRE'
 	GROUP BY player, teamid
4. Question:
	Select the result that would be obtained from this code:
	SELECT DISTINCT teamid, mdate
  	FROM goal JOIN game on (matchid=id)
 	WHERE mdate = '9 June 2012'
	Answer: 
		DEN	9 June 2012
		GER	9 June 2012

5. Question:
	Select the code which would show the player and their team for those who have scored against Poland(POL) in National Stadium, Warsaw. 
	
	Answer:
	SELECT DISTINCT player, teamid 
   	FROM game JOIN goal ON matchid = id 
  	WHERE stadium = 'National Stadium, Warsaw' 
 	AND (team1 = 'POL' OR team2 = 'POL')
   	AND teamid != 'POL'

6. Question:
	Select the code which shows the player, their team and the time they scored, for players who have played in Stadion Miejski (Wroclaw) but not against Italy(ITA). 
	
	Answer:
	SELECT DISTINCT player, teamid, gtime
  	FROM game JOIN goal ON matchid = id
 	WHERE stadium = 'Stadion Miejski (Wroclaw)'
   	AND (( teamid = team2 AND team1 != 'ITA') OR ( teamid = team1 AND team2 != 'ITA'))

7. Question:
	 Select the result that would be obtained from this code:

	SELECT teamname, COUNT(*)
  	FROM eteam JOIN goal ON teamid = id
 	GROUP BY teamname
	HAVING COUNT(*) < 3

	Answer:
	Netherlands	2
	Poland	2
	Republic of Ireland	1
	Ukraine	2



Section 7:
***************************************
		movie 
		id 	title 	yr 	director 	budget 	gross
		EXAMPLE: First 4 lines
		id	title	yr	score	votes	director
		1	Star Wars	1977	8.8	53567	360
		2	Shawshank Redemption, The	1994	9	44974	1040
		3	Pulp Fiction	1994	8.6	43993	444
		4	Titanic	1997	7.2	43371	198
****************************************
		actor 
		id 	name
		EXAMPLE: First 4 lines
		id	name
		1	Woody Allen
		2	Clint Eastwood
		3	Robert De Niro
		4	Sean Connery
****************************************
		casting 
		movieid actorid 	ord
		EXAMPLE: First 4 lines
		movieid	actorid	ord
		1	552	1
		2	25	1
		3	34	1
		4	185	1


1. Question:
	List the films where the yr is 1962 [Show id, title] 
	Answer:
	SELECT id, title FROM movie WHERE yr=1962
2. Question:
	Give year of 'Citizen Kane'. 
	Answer:
	SELECT yr FROM movie WHERE title='Citizen Kane'
3. Question:
	List all of the Star Trek movies, include the id, title and yr (all of these movies include the words Star Trek in the title). Order results by year. 
	Answer:
	SELECT id, title, yr FROM movie WHERE title LIKE '%STAR TREK%'
4. Question:
	What id number does the actor 'Glenn Close' have? 
	Answer:
	SELECT id FROM actor WHERE name= 'Glenn Close'
5. Question:
	What is the id of the film 'Casablanca' 
	Answer:
	SELECT id FROM movie WHERE title= 'Casablanca'

6. Question:
	Obtain the cast list for 'Casablanca'.
	what is a cast list?

	Use movieid=11768, (or whatever value you got from the previous question)

	Answer:
	SELECT name FROM actor JOIN casting ON actor.id=casting.actorid WHERE movieid=27

7. Question:
	Obtain the cast list for the film 'Alien' 
	Answer:
	SELECT name FROM actor JOIN casting ON actor.id=casting.actorid JOIN movie ON casting.movieid=movie.id WHERE movie.title='Alien'
8. Question:
	List the films in which 'Harrison Ford' has appeared
	Answer:
	SELECT movie.title FROM actor JOIN casting ON actor.id=casting.actorid JOIN movie ON casting.movieid=movie.id WHERE actor.name='Harrison Ford'
9. Question:
	List the films where 'Harrison Ford' has appeared - but not in the starring role. [Note: the ord field of casting gives the position of the actor. If ord=1 then this actor is in the starring role] 
	Answer:
	SELECT movie.title FROM actor JOIN casting ON actor.id=casting.actorid JOIN movie ON casting.movieid=movie.id WHERE actor.name='Harrison Ford' AND casting.ord>1
10. Question:
	List the films together with the leading star for all 1962 films. 
	Answer:
	SELECT movie.title, actor.name FROM actor JOIN casting ON actor.id=casting.actorid JOIN movie ON casting.movieid=movie.id WHERE movie.yr=1962 AND casting.ord=1
11. Question:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DIDN'T KNOW HOW TO DO THIS@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	************************Question *************
	A. Why did they have use do this if it ended up empty.

	Which were the busiest years for 'Rock Hudson', show the year and the number of movies he made each year for any year in which he made more than 2 movies. 
	Answer:
	SELECT yr,COUNT(*) FROM
  	movie JOIN casting ON movie.id=casting.movieid
        JOIN actor   ON casting.actorid=actor.id
	WHERE actor.name='Rock Hudson'
	GROUP BY yr
	HAVING COUNT(*)>1
12. Question:
	List the film title and the leading actor for all of the films 'Julie Andrews' played in.
	Did you get "Little Miss Marker twice"?
	Answer:
	SELECT movie.title, actor.name FROM movie JOIN casting ON movie.id=casting.movieid JOIN actor ON actor.id=casting.actorid
	WHERE movie.id IN(SELECT movieid FROM casting WHERE actorid IN(SELECT id FROM actor WHERE name='Julie Andrews')) AND casting.ord=1
13. Question:
	Obtain a list, in alphabetical order, of actors who've had at least 15 starring roles. 
	Answer:
	SELECT actor.name FROM actor JOIN casting ON actor.id=casting.actorid WHERE ord=1 GROUP BY actor.name HAVING COUNT(*)>=15

	NOTE: if aggregate function in filtering (at the end) but is not used in SELECT (display section) then GROUP BY & HAVING are still needed

14. Question:
	List the films released in the year 1978 ordered by the number of actors in the cast, then by title. 
	Answer:
	SELECT title, COUNT(*) FROM movie JOIN casting ON movie.id=casting.movieid WHERE movie.yr=1978 GROUP BY title ORDER BY COUNT(*) DESC, title
15. Question:
	List all the people who have worked with 'Art Garfunkel'. 
	Answer:
	SELECT DISTINCT actor.name FROM actor JOIN casting ON actor.id=casting.actorid WHERE actor.name!= 'Art Garfunkel' AND casting.movieid IN (SELECT casting.movieid FROM actor JOIN casting ON actor.id=casting.actorid WHERE 	actor.name='Art Garfunkel') ORDER BY actor.name

Section 7-Quiz:

1. 
	Question:
	Select the statement which lists the unfortunate directors of the movies which have caused financial loses (gross < budget) 
	Answer:
	SELECT name
  	FROM actor INNER JOIN movie ON actor.id = director
 	WHERE gross < budget
2. 
	Question:
	Select the correct example of JOINing three tables 
	Answer:
	SELECT *
  	FROM actor JOIN casting ON actor.id = actorid
  	JOIN movie ON movie.id = movieid
3. 
	Question:
	Select the statement that shows the list of actors called 'John' by order of number of movies in which they acted 
	Answer:
	SELECT name, COUNT(movieid)
  	FROM casting JOIN actor ON actorid=actor.id
 	WHERE name LIKE 'John %'
 	GROUP BY name ORDER BY 2 DESC
4. 
	Question:
	Select the result that would be obtained from the following code: 
	SELECT title 
   	FROM movie JOIN casting ON (movieid=movie.id)
              JOIN actor   ON (actorid=actor.id)
  	WHERE name='Paul Hogan' AND ord = 1
	Answer:
	Table-B"Crocodile" Dundee
	Crocodile Dundee in Los Angeles
	Flipper
	Lightning Jack
5. 
	Question:
	 Select the statement that lists all the actors that starred in movies directed by Ridley Scott who has id 351
	Answer:
	SELECT name
  	FROM movie JOIN casting ON movie.id = movieid
  	JOIN actor ON actor.id = actorid
	WHERE ord = 1 AND director = 351
6. 
	Question:
	There are two sensible ways to connect movie and actor. They are:
	Answer:

7. 
	Question:
	Select the result that would be obtained from the following code:

 	SELECT title, yr 
  	 FROM movie, casting, actor 
  	WHERE name='Robert De Niro' AND movieid=movie.id AND actorid=actor.id AND ord = 3

	Answer:
	Table-BA Bronx Tale	1993
	Bang the Drum Slowly	1973
	Limitless	2011
8. 
	Question:
	
	Answer: